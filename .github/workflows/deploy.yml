name: Build & Deploy .NET App to Windows Server

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build .NET app
    runs-on: windows-latest
    outputs:
      artifact_path: ${{ steps.publish.outputs.artifact_path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore, Build and Publish
        id: publish
        shell: pwsh
        run: |
          Write-Host "Building and publishing project..."
          dotnet restore Manatalol/Manatalol.App/Manatalol.App.csproj
          dotnet publish Manatalol/Manatalol.App/Manatalol.App.csproj -c Release -o ./output/published
          Write-Host "artifact_path=output/published" >> $env:GITHUB_OUTPUT

      - name: Upload published artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./output/published/

  deploy:
    name: Deploy to Windows VM via WinRM HTTPS
    runs-on: windows-latest
    needs: build
    env:
      VM_HOST: ${{ secrets.VM_HOST }}
      VM_USERNAME: ${{ secrets.VM_USERNAME }}
      VM_PASSWORD: ${{ secrets.VM_PASSWORD }}
      SUBDOMAIN: ${{ secrets.SUBDOMAIN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify package exists
        shell: pwsh
        run: |
          $zipPath = "$env:GITHUB_WORKSPACE\Manatalol.zip"
          if (-Not (Test-Path $zipPath)) {
              Write-Error "Package $zipPath not found. Make sure the build created the zip."
              exit 1
          } else {
              Write-Host "Package found: $zipPath"
          }

      - name: Deploy via WinRM HTTPS
        shell: pwsh
        run: |
          Write-Host "Starting remote deployment via WinRM (HTTPS)..."

          # Convert password to secure string and create credential object
          $secpasswd = ConvertTo-SecureString $env:VM_PASSWORD -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ($env:VM_USERNAME, $secpasswd)

          # Test WSMan connection
          try {
              Test-WSMan -ComputerName $env:VM_HOST -UseSSL -Port 5986 -Authentication Basic -ErrorAction Stop
              Write-Host "WSMan HTTPS connection successful."
          } catch {
              Write-Error "Cannot connect via WinRM HTTPS to $($env:VM_HOST). Check port 5986, firewall, certificate and credentials."
              exit 1
          }

          # Create remote session
          $session = New-PSSession -ComputerName $env:VM_HOST `
                                  -Credential $cred `
                                  -UseSSL `
                                  -Port 5986 `
                                  -Authentication Basic `
                                  -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)

          # Copy package to VM
          $remoteZipPath = "C:\manatalol\Manatalol.zip"
          Write-Host "Copying package to remote VM: $remoteZipPath"
          Copy-Item -Path $zipPath -Destination $remoteZipPath -ToSession $session -Force

          # Deploy package and configure IIS
          Invoke-Command -Session $session -ScriptBlock {
              param($zipPath, $subDomain)

              $deployPath = "C:\inetpub\wwwroot\Manatalol"

              # Create deployment folder if it does not exist
              if (Test-Path $deployPath) { Remove-Item -Recurse -Force $deployPath }
              New-Item -ItemType Directory -Force -Path $deployPath | Out-Null

              # Extract ZIP
              Expand-Archive -Path $zipPath -DestinationPath $deployPath -Force

              # Install IIS if needed
              if (-Not (Get-WindowsFeature -Name Web-Server).Installed) {
                  Install-WindowsFeature -Name Web-Server -IncludeManagementTools
              }

              Import-Module WebAdministration

              $siteName = "Manatalol"

              # Create or update IIS site
              if (-not (Get-Website -Name $siteName -ErrorAction SilentlyContinue)) {
                  New-Website -Name $siteName -Port 80 -PhysicalPath $deployPath -HostHeader $subDomain
                  Write-Host "IIS site $siteName created for $subDomain"
              } else {
                  Set-ItemProperty "IIS:\Sites\$siteName" -Name physicalPath -Value $deployPath
                  Write-Host "IIS site $siteName updated"
              }

              # Restart IIS site and service
              Restart-WebAppPool -Name "DefaultAppPool"
              Restart-Service W3SVC
              Write-Host "Deployment completed successfully!"
          } -ArgumentList $remoteZipPath, $env:SUBDOMAIN

          # Close session
          Remove-PSSession $session
          Write-Host "Remote session closed."
