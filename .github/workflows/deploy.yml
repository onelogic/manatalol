name: Build & Deploy .NET App to Windows VM

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load environment variables
        run: |
          Get-Content .env | ForEach-Object {
            if ($_ -match '^\s*$') { renturn }
            $name, $value = $_ -split '=', 2
            echo "$name=$value" >> $env:GITHUB_ENV
          }

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Build and Publish
        run: |
          dotnet restore Manatalol/Manatalol.App/Manatalol.App.csproj
          dotnet build Manatalol/Manatalol.App/Manatalol.App.csproj --configuration Release --no-restore
          dotnet publish Manatalol/Manatalol.App/Manatalol.App.csproj -c Release -o ./output/published

      - name: Verify published output
        run: |
          if (-Not (Test-Path "./output/published")) {
            Write-Host "‚ùå Le dossier ./output/published est introuvable."
            exit 1
          } else {
            Write-Host "‚úÖ Dossier publi√© trouv√©."
          }

      - name: Package app
        run: Compress-Archive -Path ./output/published/* -DestinationPath Manatalol.zip -Force


      - name: Deploy to Windows VM
        shell: pwsh
        run: |
          $hostname = "${{ env.VM_HOST }}"
          $username = "${{ env.VM_USERNAME }}"
          $password = "${{ env.VM_PASSWORD }}"
          $deployPath = "${{ env.DEPLOY_PATH }}"
          $serviceName = "${{ env.SERVICE_NAME }}"
          $localZip = "Manatalol.zip"
          $remoteZip = "C:\\temp\\Manatalol.zip"

          Write-Host "üü¢ Connexion √† $hostname via WinRM..."

          # Cr√©ation de la session WinRM (port 5986 HTTPS)
          $secPassword = ConvertTo-SecureString $password -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ($username, $secPassword)
          $session = New-PSSession -ComputerName $hostname -Credential $cred -UseSSL -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)

          # Transfert du fichier ZIP
          Write-Host "üì§ Transfert du package vers la VM..."
          Invoke-Command -Session $session -ScriptBlock {
              New-Item -ItemType Directory -Force -Path "C:\temp" | Out-Null
          }
          Copy-Item -Path $localZip -Destination $remoteZip -ToSession $session -Force

          # D√©ploiement distant
          Write-Host "‚öôÔ∏è D√©ploiement sur la VM..."
          Invoke-Command -Session $session -ScriptBlock {
              param($remoteZip, $deployPath, $serviceName)
              
              Write-Host "üì¶ Extraction du package..."
              New-Item -ItemType Directory -Force -Path $deployPath | Out-Null

              if (Test-Path $remoteZip) {
                  Expand-Archive -Path $remoteZip -DestinationPath $deployPath -Force
              }

              if (Get-Service -Name $serviceName -ErrorAction SilentlyContinue) {
                  Write-Host "üîÑ Red√©marrage du service $serviceName..."
                  Restart-Service -Name $serviceName -Force
              } else {
                  Write-Host "‚ö†Ô∏è Service $serviceName introuvable, aucun red√©marrage effectu√©."
              }
          } -ArgumentList $remoteZip, $deployPath, $serviceName

          # Fermeture de la session
          Remove-PSSession $session
          Write-Host "‚úÖ D√©ploiement termin√© avec succ√®s !"