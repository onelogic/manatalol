name: Build & Deploy .NET App to Windows VM

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load .env variables
        shell: pwsh
        run: |
          Write-Host "Loading .env variables..."
          if (Test-Path ".env") {
              Get-Content .env | ForEach-Object {
                  if ($_ -match '^\s*$') { return }
                  $parts = $_ -split '=', 2
                  echo "$($parts[0])=$($parts[1])" >> $env:GITHUB_ENV
              }
          } else {
              Write-Host ".env file not found!"
              exit 1
          }

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Build & Publish
        run: |
          dotnet restore Manatalol/Manatalol.App/Manatalol.App.csproj
          dotnet publish Manatalol/Manatalol.App/Manatalol.App.csproj -c Release -o ./output/published
          Compress-Archive -Path ./output/published/* -DestinationPath ./Manatalol.zip

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: manatalol_build
          path: ./Manatalol.zip

  deploy:
    runs-on: windows-latest
    needs: build
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: manatalol_build
          path: ./

      - name: Unzip artifact
        run: |
          Expand-Archive -Path .\Manatalol.zip -DestinationPath .\published -Force

      - name: Load .env variables
        shell: pwsh
        run: |
          Write-Host "Loading .env variables..."
          if (Test-Path ".env") {
              Get-Content .env | ForEach-Object {
                  if ($_ -match '^\s*$') { return }
                  $parts = $_ -split '=', 2
                  echo "$($parts[0])=$($parts[1])" >> $env:GITHUB_ENV
              }
          } else {
              Write-Host ".env file not found!"
              exit 1
          }

      - name: Deploy to remote Windows VM
        shell: pwsh
        run: |
          $vmHost = $env:VM_HOST
          $vmUser = $env:VM_USERNAME
          $vmPass = $env:VM_PASSWORD

          $secpasswd = ConvertTo-SecureString $vmPass -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ($vmUser, $secpasswd)

          Set-Item WSMan:\localhost\Client\TrustedHosts -Value $vmHost -Force

          $session = New-PSSession -ComputerName $vmHost -Credential $cred -Authentication Basic -UseSSL -Port 5986 -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)

          Copy-Item -Path ".\published\*" -Destination "C:\inetpub\wwwroot\Manatalol" -ToSession $session -Recurse -Force

          Invoke-Command -Session $session -ScriptBlock {
              Import-Module WebAdministration
              $siteName = "Manatalol"
              $path = "C:\inetpub\wwwroot\Manatalol"
              if (-not (Get-Website -Name $siteName -ErrorAction SilentlyContinue)) {
                  New-Website -Name $siteName -Port 80 -PhysicalPath $path -ApplicationPool "DefaultAppPool"
              } else {
                  Set-ItemProperty "IIS:\Sites\$siteName" -Name physicalPath -Value $path
              }
              Restart-WebAppPool -Name "DefaultAppPool"
              Restart-Service W3SVC
          }

          Remove-PSSession $session