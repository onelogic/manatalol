name: Build & Deploy .NET App to Windows VM

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load environment variables from .env
        run: |
          Get-Content .env | ForEach-Object {
            if ($_ -match '^\s*$') { return }  # skip lignes vides
            $name, $value = $_ -split '=', 2
            echo "$name=$value" >> $env:GITHUB_ENV
          }

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Publish
        run: dotnet publish -c Release -o published

      - name: Package app
        run: Compress-Archive -Path published\* -DestinationPath app.zip -Force

      - name: Install WinRM module
        shell: pwsh
        run: Install-Module -Name PSWSMan -Force -Scope CurrentUser

      - name: Deploy to Windows VM via WinRM
        uses: microsoft-devlabs/powershell-winrm@v2
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USERNAME }}
          password: ${{ env.VM_PASSWORD }}
          port: 5986
          protocol: https
          script: |
            Write-Host "üöÄ D√©ploiement sur $env:COMPUTERNAME..."
            $remoteZip = "C:\temp\app.zip"
            $deployPath = "${{ env.DEPLOY_PATH }}"
            $serviceName = "${{ env.SERVICE_NAME }}"

            # Cr√©er les dossiers si besoin
            New-Item -ItemType Directory -Force -Path "C:\temp" | Out-Null
            New-Item -ItemType Directory -Force -Path $deployPath | Out-Null

            # Copier le fichier du runner
            Copy-Item -Path "${{ github.workspace }}\app.zip" -Destination $remoteZip -Force

            # Stopper le service s'il existe
            if (Get-Service -Name $serviceName -ErrorAction SilentlyContinue) {
              Write-Host "‚è∏Ô∏è  Arr√™t du service $serviceName"
              Stop-Service -Name $serviceName -Force
            }

            # D√©compresser et √©craser les anciens fichiers
            Write-Host "üì¶ Extraction du package..."
            Expand-Archive -Path $remoteZip -DestinationPath $deployPath -Force

            # Red√©marrer le service
            if (Get-Service -Name $serviceName -ErrorAction SilentlyContinue) {
              Write-Host "‚ñ∂Ô∏è D√©marrage du service $serviceName"
              Start-Service -Name $serviceName
            }

            Write-Host "‚úÖ D√©ploiement termin√© avec succ√®s."
