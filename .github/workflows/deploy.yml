name: Build & Deploy .NET App to Windows VM

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    outputs:
      artifact_path: ${{ steps.publish.outputs.artifact_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load .env variables
        shell: pwsh
        run: |
          Write-Host "Loading .env variables..."
          if (Test-Path "$PWD\.env") {
              Get-Content "$PWD\.env" | ForEach-Object {
                  if ($_ -match '^\s*$') { return }
                  $parts = $_ -split '=', 2
                  echo "$($parts[0])=$($parts[1])" >> $env:GITHUB_ENV
              }
          } else {
              Write-Host ".env file not found!"
              exit 1
          }

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Build & Publish
        id: publish
        shell: pwsh
        run: |
          dotnet restore Manatalol/Manatalol.App/Manatalol.App.csproj
          dotnet publish Manatalol/Manatalol.App/Manatalol.App.csproj -c Release -o ./output/published
          Write-Host "artifact_path=output/published" >> $env:GITHUB_OUTPUT

      - name: Upload published artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./output/published

      - name: Upload .env file
        uses: actions/upload-artifact@v4
        with:
          name: env-file
          path: .env

  deploy:
    runs-on: windows-latest
    needs: build
    steps:
      - name: Download published artifact
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: ./output/published

      - name: Download .env file
        uses: actions/download-artifact@v4
        with:
          name: env-file
          path: .

      - name: Load .env variables
        shell: pwsh
        run: |
          Write-Host "Loading .env variables..."
          if (Test-Path "$PWD\.env") {
              Get-Content "$PWD\.env" | ForEach-Object {
                  if ($_ -match '^\s*$') { return }
                  $parts = $_ -split '=', 2
                  echo "$($parts[0])=$($parts[1])" >> $env:GITHUB_ENV
              }
          } else {
              Write-Host ".env file not found!"
              exit 1
          }

      - name: Copy files to VM
        shell: pwsh
        run: |
          $user = $env:VM_USERNAME
          $pass = $env:VM_PASSWORD
          $host = $env:VM_HOST
          $localPath = "$PWD\output\published\*"
          $remotePath = "C:\inetpub\wwwroot\Manatalol"

          Write-Host "Copying files to $host..."
          $secpasswd = ConvertTo-SecureString $pass -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ($user, $secpasswd)

          # Crée le dossier distant si nécessaire
          Invoke-Command -ComputerName $host -Credential $cred -ScriptBlock {
              param($remotePath)
              if (-not (Test-Path $remotePath)) { New-Item -ItemType Directory -Force -Path $remotePath | Out-Null }
          } -ArgumentList $remotePath

          # Copie les fichiers avec robocopy (fonctionne mieux que Copy-Item via session pour Windows)
          robocopy $PWD\output\published $remotePath /MIR /NFL /NDL /NJH /NJS /nc /ns /np

      - name: Deploy & configure IIS
        shell: pwsh
        run: |
          $user = $env:VM_USERNAME
          $pass = $env:VM_PASSWORD
          $host = $env:VM_HOST
          $subDomain = $env:SUBDOMAIN
          $sitePath = "C:\inetpub\wwwroot\Manatalol"

          $secpasswd = ConvertTo-SecureString $pass -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ($user, $secpasswd)

          Invoke-Command -ComputerName $host -Credential $cred -ScriptBlock {
              param($siteName, $path, $subDomain)

              # Installer IIS si nécessaire
              Install-WindowsFeature -Name Web-Server -IncludeManagementTools

              # Crée le site IIS si inexistant
              if (-not (Get-Website -Name $siteName -ErrorAction SilentlyContinue)) {
                  New-Website -Name $siteName -Port 80 -PhysicalPath $path -HostHeader $subDomain
              } else {
                  Set-ItemProperty "IIS:\Sites\$siteName" -Name physicalPath -Value $path
              }

              # Redémarre le pool et le service
              Restart-WebAppPool -Name "DefaultAppPool"
              Restart-Service W3SVC
          } -ArgumentList "Manatalol", $sitePath, $subDomain