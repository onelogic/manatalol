name: Build & Deploy .NET App to Windows VM (Final)

on:
  push:
    branches:
      - main

env:
  PROJECT_PATH: Manatalol/Manatalol.App/Manatalol.App.csproj
  OUTPUT_DIR: output/published

jobs:
  build:
    runs-on: windows-latest
    outputs:
      artifact_path: ${{ steps.publish.outputs.artifact_path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load .env variables
        shell: pwsh
        run: |
          Write-Host "Loading .env variables..."
          if (Test-Path ".env") {
              Get-Content .env | ForEach-Object {
                  if ($_ -match '^\s*$') { return }
                  $key, $value = $_ -split '=', 2
                  echo "$key=$value" >> $env:GITHUB_ENV
              }
          } else {
              Write-Host ".env file not found!"
              exit 1
          }

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Build & Publish
        id: publish
        shell: pwsh
        run: |
          dotnet restore $env:PROJECT_PATH
          dotnet publish $env:PROJECT_PATH -c Release -o $env:OUTPUT_DIR
          Write-Host "artifact_path=$env:OUTPUT_DIR" >> $env:GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ${{ env.OUTPUT_DIR }}

  deploy:
    runs-on: windows-latest
    needs: build

    steps:
      - name: Download published artifact
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: C:\Deploy\published-app

      - name: Load .env variables
        shell: pwsh
        run: |
          Write-Host "Loading .env variables..."
          if (Test-Path ".env") {
              Get-Content .env | ForEach-Object {
                  if ($_ -match '^\s*$') { return }
                  $key, $value = $_ -split '=', 2
                  echo "$key=$value" >> $env:GITHUB_ENV
              }
          } else {
              Write-Host ".env file not found!"
              exit 1
          }

      - name: Create ZIP for deployment
        shell: pwsh
        run: |
          Compress-Archive -Path C:\Deploy\published-app\* -DestinationPath C:\Deploy\Manatalol.zip -Force
          Write-Host "‚úÖ Archive created: C:\Deploy\Manatalol.zip"

      - name: Deploy via WinRM (HTTPS)
        shell: pwsh
        run: |
          $vmHost = $env:VM_HOST
          $vmUser = $env:VM_USERNAME
          $vmPass = $env:VM_PASSWORD
          $subDomain = $env:SUBDOMAIN

          if (-not $vmHost -or -not $vmUser -or -not $vmPass) {
              Write-Error "‚ùå Missing VM credentials in environment variables!"
              exit 1
          }

          $securePassword = ConvertTo-SecureString $vmPass -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ($vmUser, $securePassword)

          # Autoriser les connexions WinRM HTTPS
          Set-Item WSMan:\localhost\Client\TrustedHosts -Value $vmHost -Force

          Write-Host "üîó Establishing WinRM session to $vmHost..."
          $session = New-PSSession -ComputerName $vmHost -Credential $cred -UseSSL -Port 5986 -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)

          Copy-Item -Path "C:\Deploy\Manatalol.zip" -Destination "C:\inetpub\wwwroot\Manatalol.zip" -ToSession $session -Force

          Invoke-Command -Session $session -ScriptBlock {
              param($subDomain)
              Write-Host "üì¶ Extracting and configuring IIS site..."
              Expand-Archive -Path "C:\inetpub\wwwroot\Manatalol.zip" -DestinationPath "C:\inetpub\wwwroot\Manatalol" -Force
              Remove-Item "C:\inetpub\wwwroot\Manatalol.zip" -Force

              Import-Module WebAdministration
              $siteName = "Manatalol"
              $path = "C:\inetpub\wwwroot\Manatalol"

              if (-not (Get-Website -Name $siteName -ErrorAction SilentlyContinue)) {
                  New-Website -Name $siteName -Port 80 -PhysicalPath $path -HostHeader $subDomain
              } else {
                  Set-ItemProperty "IIS:\Sites\$siteName" -Name physicalPath -Value $path
              }

              Restart-WebAppPool -Name "DefaultAppPool"
              Restart-Service W3SVC
              Write-Host "‚úÖ Deployment complete and IIS restarted!"
          } -ArgumentList $subDomain

          Remove-PSSession $session