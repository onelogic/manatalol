name: Build & Deploy .NET App to Windows Server

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build .NET app
    runs-on: windows-latest
    outputs:
      artifact_path: ${{ steps.publish.outputs.artifact_path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore, Build and Publish
        id: publish
        shell: pwsh
        run: |
          Write-Host "Building and publishing project..."
          dotnet restore Manatalol/Manatalol.App/Manatalol.App.csproj
          dotnet publish Manatalol/Manatalol.App/Manatalol.App.csproj -c Release -o ./output/published
          Write-Host "artifact_path=output/published" >> $env:GITHUB_OUTPUT

      - name: Upload published artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./output/published/

  deploy:
    runs-on: windows-latest
    needs: build
    env:
      VM_HOST: ${{ secrets.VM_HOST }}
      VM_USERNAME: ${{ secrets.VM_USERNAME }}
      VM_PASSWORD: ${{ secrets.VM_PASSWORD }}
      SUBDOMAIN: ${{ secrets.SUBDOMAIN }}

    steps:
      - name: Download published app
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: ./output/published

      - name: Start remote deployment via WinRM (HTTPS)
        shell: pwsh
        run: |
          Write-Host "Starting remote deployment via WinRM (HTTPS)..."

          if (-not $env:VM_HOST -or -not $env:VM_USERNAME -or -not $env:VM_PASSWORD) {
              Write-Error "Missing environment variables. Please verify your GitHub Secrets."
              exit 1
          }

          $vmHost = $env:VM_HOST
          $vmUser = $env:VM_USERNAME
          $vmPass = $env:VM_PASSWORD
          $subDomain = $env:SUBDOMAIN
          $appPath = "C:\inetpub\wwwroot\Manatalol"

          # Convert credentials
          $secpasswd = ConvertTo-SecureString $vmPass -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ($vmUser, $secpasswd)

          # Test connection
          Test-WSMan $vmHost -UseSSL -Port 5986 -ErrorAction Stop

          # Create session
          $session = New-PSSession -ComputerName $vmHost `
                                  -Credential $cred `
                                  -UseSSL `
                                  -Port 5986 `
                                  -Authentication Basic `
                                  -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)

          # Copy files
          Copy-Item -Path "./output/published/*" -Destination $appPath -ToSession $session -Force -Recurse

          # Configure IIS and bind subdomain
          Invoke-Command -Session $session -ScriptBlock {
              param($siteName, $physicalPath, $subDomain)
              Import-Module WebAdministration

              if (-not (Test-Path $physicalPath)) {
                  New-Item -ItemType Directory -Path $physicalPath -Force | Out-Null
              }

              if (-not (Get-Website -Name $siteName -ErrorAction SilentlyContinue)) {
                  New-Website -Name $siteName -Port 80 -PhysicalPath $physicalPath -HostHeader $subDomain
              } else {
                  Set-ItemProperty "IIS:\Sites\$siteName" -Name physicalPath -Value $physicalPath
              }

              Restart-WebAppPool -Name "DefaultAppPool"
              Restart-Service W3SVC
          } -ArgumentList "Manatalol", $appPath, $subDomain

          Remove-PSSession $session
          Write-Host "Deployment finished!"
