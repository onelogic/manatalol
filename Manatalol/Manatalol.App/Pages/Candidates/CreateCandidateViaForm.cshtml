@page "/create-candidate"
@model Manatalol.App.Pages.Candidates.CreateCandidateModalModel

<div>
    @if (!ModelState.IsValid)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close">
                <i class="bi bi-trash"></i>
            </button>
            <div asp-validation-summary="All"></div>
        </div>
    }
    <h3 class="text-primary mb-3">Create New Candidate</h3>

    <form id="create-candidate-form" method="post" asp-page-handler="CreateCandidate">
        <div>
            <!-- About Me -->
            <h5 class="text-danger mb-3">About Me</h5>
            <div class="row mb-3">
                <div class="col-md-6">
                    <label asp-for="NewCandidate.FirstName"></label>
                    <input asp-for="NewCandidate.FirstName" class="form-control" />
                </div>
                <div class="col-md-6">
                    <label asp-for="NewCandidate.LastName"></label>
                    <input asp-for="NewCandidate.LastName" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">
                    <label asp-for="NewCandidate.Email"></label>
                    <input asp-for="NewCandidate.Email" type="email" class="form-control" />
                </div>
                <div class="col-md-6">
                    <label asp-for="NewCandidate.PhoneNumber"></label>
                    <input asp-for="NewCandidate.PhoneNumber" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">
                    <label asp-for="NewCandidate.Location"></label>
                    <input asp-for="NewCandidate.Location" class="form-control" />
                </div>
                <div class="col-md-6">
                    <label asp-for="NewCandidate.Function"></label>
                    <input asp-for="NewCandidate.Function" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">
                    <label asp-for="NewCandidate.CurrentCompany"></label>
                    <input asp-for="NewCandidate.CurrentCompany" class="form-control" />
                </div>
            </div>

            <hr />

            <!-- Skills -->
            <h5 class="mb-2">Skills</h5>
            <div id="skills-wrapper" class="mb-3">
                <input type="text" id="skill-input" class="form-control" placeholder="Type skill and press Enter" />
                <div id="skills-tags" class="mt-2 d-flex flex-wrap gap-2"></div>
            </div>
            <input type="hidden" name="NewCandidate.SkillsTag" id="skills-hidden" />

            <hr />

            <!-- Experience -->
            <h5 class="text-danger mb-3">Experiences</h5>
            <div id="experienceContainer">
                @if (Model.NewCandidate?.Experiences != null)
                {
                    for (int i = 0; i < Model.NewCandidate.Experiences.Count; i++)
                    {
                        <div class="border p-3 mb-2 experience-block">
                            <div class="row">
                                <div class="col-md-6">
                                    <label>Company</label>
                                    <input name="NewCandidate.Experiences[@i].CompanyName" value="@Model.NewCandidate.Experiences[i].CompanyName" class="form-control mb-2" />
                                </div>
                                <div class="col-md-6">
                                    <label>Position</label>
                                    <input name="NewCandidate.Experiences[@i].Position" value="@Model.NewCandidate.Experiences[i].Position" class="form-control mb-2" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <label>Start Date</label>
                                    <input type="date" name="NewCandidate.Experiences[@i].StartDate" value="@Model.NewCandidate.Experiences[i].StartDate.ToString("yyyy-MM-dd")" class="form-control mb-2" />
                                </div>
                                <div class="col-md-6">
                                    <div class="row">
                                        <div class="col-md-9">
                                            <label>End Date</label>
                                            <input type="date" name="NewCandidate.Experiences[${index}].EndDate" class="form-control mb-2" />
                                            <div class="invalid-feedback"></div>
                                        </div>
                                        <div class="col-md-3 align-self-center">
                                            <input asp-for="NewCandidate.Experiences[i].IsCurrent" class="form-check-input is-current-checkbox" />
                                            <label asp-for="NewCandidate.Experiences[i].IsCurrent" class="form-check-label"></label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <label>Description</label>
                            <textarea name="NewCandidate.Experiences[@i].Description" class="form-control mb-2">@Model.NewCandidate.Experiences[i].Description</textarea>
                            <button type="button" class="btn btn-danger btn-sm remove-experience mt-2">Remove</button>
                        </div>
                    }
                }
            </div>
            <button type="button" class="btn btn-outline-primary mb-3" id="addExperienceBtn">+ Add Experience</button>

            <hr />
            <!-- Education -->
            <h5 class="text-danger mb-3">Educations</h5>
            <div id="educationContainer">
                @if (Model.NewCandidate?.Educations != null)
                {
                    for (int i = 0; i < Model.NewCandidate.Educations.Count; i++)
                    {
                        <div class="border p-3 mb-2 education-block">
                            <div class="row">
                                <div class="col-md-6">
                                    <label>School</label>
                                    <input name="NewCandidate.Educations[@i].School" value="@Model.NewCandidate.Educations[i].School" class="form-control mb-2" />
                                </div>
                                <div class="col-md-6">
                                    <label>Degree</label>
                                    <input name="NewCandidate.Educations[@i].Degree" value="@Model.NewCandidate.Educations[i].Degree" class="form-control mb-2" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <label>Start Date</label>
                                    <input type="date" name="NewCandidate.Educations[@i].StartDate" value="@Model.NewCandidate.Educations[i].StartDate.ToString("yyyy-MM-dd")" class="form-control mb-2" />
                                </div>
                                <div class="col-md-6">
                                    <label>End Date</label>
                                    <input type="date" name="NewCandidate.Educations[@i].EndDate" value="@Model.NewCandidate.Educations[i].EndDate?.ToString("yyyy-MM-dd")" class="form-control mb-2" />
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                            <label>Description</label>
                            <textarea name="NewCandidate.Educations[@i].Description" class="form-control mb-2">@Model.NewCandidate.Educations[i].Description</textarea>
                            <button type="button" class="btn btn-danger btn-sm remove-education mt-2">Remove</button>
                        </div>
                    }
                }
            </div>
            <button type="button" class="btn btn-outline-primary mb-3" id="addEducationBtn">+ Add Education</button>

        </div>

        <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-success">Create</button>
        </div>
    </form>
</div>

<style>
    .tag {
        color: white;
        padding: 4px 8px;
        display: inline-flex;
        align-items: center;
        gap: 4px;
    }

        .tag button {
            background: none;
            border: none;
            color: white;
            font-weight: bold;
            cursor: pointer;
        }
</style>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById("create-candidate-form");
            const experienceContainer = document.getElementById("experienceContainer");
            const educationContainer = document.getElementById("educationContainer");
            const addExperienceBtn = document.getElementById("addExperienceBtn");
            const addEducationBtn = document.getElementById("addEducationBtn");
            const skillInput = document.getElementById("skill-input");
            const skillsHidden = document.getElementById("skills-hidden");
            const skillsTags = document.getElementById("skills-tags");
            const skills = [];

            // add skills tags
            function updateSkillsHidden() { if (skillsHidden) skillsHidden.value = skills.join(","); }
            function createSkillTag(value) {
                const tag = document.createElement("span");
                tag.className = "tag bg-primary";
                tag.textContent = value;
                const btn = document.createElement("button");
                btn.type = "button"; btn.textContent = "x";
                btn.addEventListener("click", () => {
                    const ix = skills.indexOf(value);
                    if (ix > -1) skills.splice(ix, 1);
                    tag.remove(); updateSkillsHidden();
                });
                tag.appendChild(btn); skillsTags.appendChild(tag);
            }
            if (skillInput) {
                skillInput.addEventListener("keydown", function (e) {
                    if (e.key === "Enter" || e.key === "Tab") {
                        e.preventDefault(); e.stopPropagation();
                        const v = skillInput.value.trim();
                        if (v && !skills.includes(v)) { skills.push(v); createSkillTag(v); updateSkillsHidden(); skillInput.value = ""; }
                    }
                });
            }

            // prevent submit when tap enter on input
            if (form) {
                form.addEventListener("keydown", function (e) {
                    if (e.key !== "Enter") return;
                    const t = e.target;
                    if (!t) return;
                    if (t.tagName === "TEXTAREA" || t === skillInput) return;
                    if (t.type === "submit" || t.type === "button" || t.type === "checkbox") return;
                    e.preventDefault();
                });
            }

            // create experiences blocs
            function createExperienceBlockHtml(index) {
                return `
                <div class="border p-3 mb-2 experience-block">
                    <div class="row">
                        <div class="col-md-6">
                            <label>Company</label>
                            <input name="NewCandidate.Experiences[${index}].CompanyName" class="form-control mb-2" />
                        </div>
                        <div class="col-md-6">
                            <label>Position</label>
                            <input name="NewCandidate.Experiences[${index}].Position" class="form-control mb-2" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label>Start Date</label>
                            <input type="date" name="NewCandidate.Experiences[${index}].StartDate" class="form-control mb-2" />
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-md-9">
                                    <label>End Date</label>
                                    <input type="date" name="NewCandidate.Experiences[${index}].EndDate" class="form-control mb-2" />
                                    <div class="invalid-feedback"></div>
                                </div>
                                <div class="col-md-3 align-self-center">
                                    <input type="checkbox" class="form-check-input is-current-checkbox" name="NewCandidate.Experiences[${index}].IsCurrent" value="true" />
                                    <label class="form-check-label">Is Current</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <label>Description</label>
                    <textarea name="NewCandidate.Experiences[${index}].Description" class="form-control mb-2"></textarea>
                    <button type="button" class="btn btn-danger btn-sm mt-2 remove-experience">Remove</button>
                </div>`;
            }

            // create educations blocs
            function createEducationBlockHtml(index) {
                return `
                <div class="border p-3 mb-2 education-block">
                    <div class="row">
                        <div class="col-md-6">
                            <label>School</label>
                            <input name="NewCandidate.Educations[${index}].School" class="form-control mb-2" />
                        </div>
                        <div class="col-md-6">
                            <label>Degree</label>
                            <input name="NewCandidate.Educations[${index}].Degree" class="form-control mb-2" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label>Start Date</label>
                            <input type="date" name="NewCandidate.Educations[${index}].StartDate" class="form-control mb-2" />
                        </div>
                        <div class="col-md-6">
                            <label>End Date</label>
                            <input type="date" name="NewCandidate.Educations[${index}].EndDate" class="form-control mb-2" />
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>
                    <label>Description</label>
                    <textarea name="NewCandidate.Educations[${index}].Description" class="form-control mb-2"></textarea>
                    <button type="button" class="btn btn-danger btn-sm mt-2 remove-education">Remove</button>
                </div>`;
            }

            // reindex des noms dans un container
            function reindexCollection(container) {
                Array.from(container.children).forEach((block, i) => {
                    block.querySelectorAll('[name]').forEach(el => {
                        const old = el.getAttribute('name');
                        if (!old) return;
                        const newName = old.replace(/\[\d+\]/, `[${i}]`);
                        el.setAttribute('name', newName);
                    });
                });
            }

            // validation dates
            function validateDatesForBlock(block) {
                const start = block.querySelector("input[type='date'][name$='.StartDate']");
                const end = block.querySelector("input[type='date'][name$='.EndDate']");
                const chk = block.querySelector(".is-current-checkbox");
                const feed = block.querySelector(".invalid-feedback");
                if (!start || !end) return;
                if (chk && chk.checked) { end.classList.remove("is-invalid"); if (feed) feed.innerText = ""; return; }
                if (start.value && end.value && new Date(start.value) > new Date(end.value)) {
                    end.classList.add("is-invalid"); if (feed) feed.innerText = "Start Date must be earlier than End Date.";
                } else { end.classList.remove("is-invalid"); if (feed) feed.innerText = ""; }
            }

            //
            function attachListenersToBlock(block) {
                const chk = block.querySelector(".is-current-checkbox");
                const start = block.querySelector("input[type='date'][name$='.StartDate']");
                const end = block.querySelector("input[type='date'][name$='.EndDate']");

                if (chk) {
                    chk.addEventListener("change", function () {
                        if (end) {
                            if (this.checked) { end.value = ""; end.disabled = true; end.classList.remove("is-invalid"); const f = block.querySelector(".invalid-feedback"); if (f) f.innerText = ""; }
                            else { end.disabled = false; }
                        }
                    });
                    if (end) { end.disabled = !!chk.checked; }
                }

                if (start) start.addEventListener("change", () => validateDatesForBlock(block));
                if (end) {
                    end.addEventListener("input", function () { end.classList.remove("is-invalid"); const f = block.querySelector(".invalid-feedback"); if (f) f.innerText = ""; });
                    end.addEventListener("change", () => validateDatesForBlock(block));
                }
            }

            document.querySelectorAll(".experience-block").forEach(b => attachListenersToBlock(b));
            document.querySelectorAll(".education-block").forEach(b => attachListenersToBlock(b));

            // add experience
            if (addExperienceBtn) {
                addExperienceBtn.addEventListener("click", function () {
                    const index = experienceContainer.children.length;
                    const wrapper = document.createElement("div");
                    wrapper.innerHTML = createExperienceBlockHtml(index);
                    const newBlock = wrapper.firstElementChild;
                    experienceContainer.appendChild(newBlock);
                    reindexCollection(experienceContainer);
                    attachListenersToBlock(newBlock);
                });
            }

            // remove experience
            experienceContainer.addEventListener("click", function (e) {
                if (e.target && e.target.matches(".remove-experience")) {
                    const block = e.target.closest(".experience-block");
                    if (block) { block.remove(); reindexCollection(experienceContainer); }
                }
            });

            // add education
            if (addEducationBtn) {
                addEducationBtn.addEventListener("click", function () {
                    const index = educationContainer.children.length;
                    const wrapper = document.createElement("div");
                    wrapper.innerHTML = createEducationBlockHtml(index);
                    const newBlock = wrapper.firstElementChild;
                    educationContainer.appendChild(newBlock);
                    reindexCollection(educationContainer);
                    attachListenersToBlock(newBlock);
                });
            }

            // remove education
            educationContainer.addEventListener("click", function (e) {
                if (e.target && e.target.matches(".remove-education")) {
                    const block = e.target.closest(".education-block");
                    if (block) { block.remove(); reindexCollection(educationContainer); }
                }
            });

            form.addEventListener("submit", function (e) {
                reindexCollection(experienceContainer);
                reindexCollection(educationContainer);

                // For each experience block, ensure exactly one field is sent for .IsCurrent:
                // - if checkbox is checked => keep checkbox name, remove any hidden with same name
                // - if checkbox is not checked => remove name from checkbox and create/update hidden name=value false
                Array.from(experienceContainer.children).forEach((block, idx) => {
                    const name = `NewCandidate.Experiences[${idx}].IsCurrent`;
                    const chk = block.querySelector('.is-current-checkbox');

                    if (chk) {
                        if (chk.checked) {
                            chk.setAttribute('name', name);
                            // remove hidden duplicates inside this block
                            const hs = block.querySelectorAll(`input[type="hidden"][name="${name}"]`);
                            hs.forEach(h => h.remove());
                        } else {
                            chk.removeAttribute('name');
                            let hidden = block.querySelector(`input[type="hidden"][name="${name}"]`);
                            if (!hidden) {
                                hidden = document.createElement('input');
                                hidden.type = 'hidden';
                                hidden.name = name;
                                hidden.value = 'false';
                                block.appendChild(hidden);
                            } else {
                                hidden.value = 'false';
                            }
                        }
                    } else {
                        let hidden = block.querySelector(`input[type="hidden"][name="${name}"]`);
                        if (!hidden) {
                            hidden = document.createElement('input');
                            hidden.type = 'hidden';
                            hidden.name = name;
                            hidden.value = 'false';
                            block.appendChild(hidden);
                        } else {
                            hidden.value = 'false';
                        }
                    }
                });

                try {
                    const fd = new FormData(form);
                    console.group('DEBUG FormData - IsCurrent values');
                    for (const pair of fd.entries()) {
                        if (pair[0].endsWith('.IsCurrent')) console.log(pair[0], '=', pair[1]);
                    }
                    console.groupEnd();
                } catch (err) {
                    console.error('FormData debug error', err);
                }

                document.querySelectorAll('.experience-block').forEach(b => validateDatesForBlock(b));
                document.querySelectorAll('.education-block').forEach(b => validateDatesForBlock(b));
                if (form.querySelectorAll('.is-invalid').length > 0) {
                    e.preventDefault();
                    const first = form.querySelector('.is-invalid');
                    if (first) first.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            });

        });
    </script>
}
}